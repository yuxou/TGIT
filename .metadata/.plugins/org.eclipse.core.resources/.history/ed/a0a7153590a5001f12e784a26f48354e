package model.dao; 

import java.sql.*;
import java.util.*;
import model.domain.User;
import repository.jdbc.*;

public class UserDAO {
    private Set<String> loggedInUsers = new HashSet<>();
    
    // 사용자 로그인 처리
    public Optional<User> login(String userId, String password) {
        String sql = "SELECT * FROM users WHERE userId = ? AND password = ?";
        try (Connection conn = JDBCUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, userId);
            pstmt.setString(2, password);
            ResultSet rs = pstmt.executeQuery();
            
            if (rs.next()) {
                User user = new User(
                    rs.getString("userId"),
                    rs.getString("password"),
                    rs.getString("name"),
                    rs.getDate("birthday").toLocalDate().getYear(),
                    rs.getDate("birthday").toLocalDate().getMonthValue(),
                    rs.getDate("birthday").toLocalDate().getDayOfMonth(),
                    rs.getString("email")
                );
                loggedInUsers.add(userId); // 로그인 성공 시 사용자 ID 추가
                return Optional.of(user);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return Optional.empty(); // 로그인 실패 시
    }
    
    // 사용자 로그아웃 처리
    public void logout(String userId) {
        if (loggedInUsers.remove(userId)) { // 로그아웃 성공 시 사용자 ID 제거
            System.out.println(userId + " has been logged out.");
        }
    }
    
    // 사용자 등록
    public void createUser(User user) {
        String sql = "INSERT INTO users (userId, password, name, birthday, email) VALUES (?, ?, ?, ?, ?)";
        try (Connection conn = JDBCUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, user.getUserId());
            pstmt.setString(2, user.getPassword());
            pstmt.setString(3, user.getName());
            pstmt.setDate(4, new java.sql.Date(user.getBirthday().getTime()));
            pstmt.setString(5, user.getEmail());
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    // 사용자 정보 수정
    public void updateUser(User updatedUser) {
        String sql = "UPDATE users SET password = ?, name = ?, birthday = ?, email = ? WHERE userId = ?";
        try (Connection conn = JDBCUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, updatedUser.getPassword());
            pstmt.setString(2, updatedUser.getName());
            pstmt.setDate(3, new java.sql.Date(updatedUser.getBirthday().getTime()));
            pstmt.setString(4, updatedUser.getEmail());
            pstmt.setString(5, updatedUser.getUserId());
            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected == 0) {
                throw new IllegalArgumentException("User not found");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    // 사용자 정보 조회
    public Optional<User> findUserById(String userId) {
        String sql = "SELECT * FROM users WHERE userId = ?";
        try (Connection conn = JDBCUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, userId);
            ResultSet rs = pstmt.executeQuery();
            
            if (rs.next()) {
                User user = new User(
                    rs.getString("userId"),
                    rs.getString("password"),
                    rs.getString("name"),
                    rs.getDate("birthday").toLocalDate().getYear(),
                    rs.getDate("birthday").toLocalDate().getMonthValue(),
                    rs.getDate("birthday").toLocalDate().getDayOfMonth(),
                    rs.getString("email")
                );
                return Optional.of(user);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return Optional.empty();
    }
    
    // 마이페이지 조회 (사용자 정보 조회 재사용)
    public Optional<User> viewMyPage(String userId) {
        return findUserById(userId);
    }
}