package model.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import model.domain.Plan;

/**
 * 여행 계획 관리 테이블에 대한 DAO 클래스
 * PLANINFO 테이블에서 여행 계획 정보를 추가, 수정, 삭제, 검색 수행
 */
public class PlanDAO {
	private JDBCUtil jdbcUtil = null;
	
	public PlanDAO() {			
		jdbcUtil = new JDBCUtil();	// JDBCUtil 객체 생성
	}
		
	/**
	 * 새로운 여행 계획을 PLANINFO 테이블에 생성.
	 */
	public int create(Plan plan) throws SQLException {
		String sql = "INSERT INTO PLANINFO (planId, userId, planName, startDate, endDate, description) "
					+ "VALUES (?, ?, ?, ?, ?, ?)";		
		Object[] param = new Object[] {plan.getPlanId(), plan.getUserId(), 
									   plan.getPlanName(), plan.getStartDate(), 
									   plan.getEndDate(), plan.getDescription()};				
		jdbcUtil.setSqlAndParameters(sql, param);	// JDBCUtil에 insert문과 매개 변수 설정
						
		try {				
			int result = jdbcUtil.executeUpdate();	// insert 문 실행
			return result;
		} catch (Exception ex) {
			jdbcUtil.rollback();
			ex.printStackTrace();
		} finally {		
			jdbcUtil.commit();
			jdbcUtil.close();	// resource 반환
		}		
		return 0;			
	}

	/**
	 * 기존 여행 계획 정보를 수정.
	 */
	public int update(Plan plan) throws SQLException {
		String sql = "UPDATE PLANINFO "
					+ "SET planName=?, startDate=?, endDate=?, description=? "
					+ "WHERE planId=?";
		Object[] param = new Object[] {plan.getPlanName(), plan.getStartDate(),
									   plan.getEndDate(), plan.getDescription(),
									   plan.getPlanId()};				
		jdbcUtil.setSqlAndParameters(sql, param);	// JDBCUtil에 update문과 매개 변수 설정
			
		try {				
			int result = jdbcUtil.executeUpdate();	// update 문 실행
			return result;
		} catch (Exception ex) {
			jdbcUtil.rollback();
			ex.printStackTrace();
		}
		finally {
			jdbcUtil.commit();
			jdbcUtil.close();	// resource 반환
		}		
		return 0;
	}

	/**
	 * 여행 계획 ID에 해당하는 계획을 삭제.
	 */
	public int remove(String planId) throws SQLException {
		String sql = "DELETE FROM PLANINFO WHERE planId=?";		
		jdbcUtil.setSqlAndParameters(sql, new Object[] {planId});	// JDBCUtil에 delete문과 매개 변수 설정

		try {				
			int result = jdbcUtil.executeUpdate();	// delete 문 실행
			return result;
		} catch (Exception ex) {
			jdbcUtil.rollback();
			ex.printStackTrace();
		}
		finally {
			jdbcUtil.commit();
			jdbcUtil.close();	// resource 반환
		}		
		return 0;
	}

	/**
	 * 주어진 여행 계획 ID에 해당하는 여행 계획 정보를 데이터베이스에서 찾아 Plan 도메인 클래스에 
	 * 저장하여 반환.
	 */
	public Plan findPlan(String planId) throws SQLException {
        String sql = "SELECT userId, planName, startDate, endDate, description "
        			+ "FROM PLANINFO "
        			+ "WHERE planId=?";              
		jdbcUtil.setSqlAndParameters(sql, new Object[] {planId});	// JDBCUtil에 query문과 매개 변수 설정

		try {
			ResultSet rs = jdbcUtil.executeQuery();		// query 실행
			if (rs.next()) {						// 계획 정보 발견
				Plan plan = new Plan(		// Plan 객체를 생성하여 계획 정보를 저장
					planId,
					rs.getString("userId"),
					rs.getString("planName"),
					rs.getDate("startDate"),
					rs.getDate("endDate"),
					rs.getString("description"));
				return plan;
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			jdbcUtil.close();		// resource 반환
		}
		return null;
	}

	/**
	 * 전체 여행 계획 정보를 검색하여 List에 저장 및 반환.
	 */
	public List<Plan> findPlanList() throws SQLException {
        String sql = "SELECT planId, userId, planName, startDate, endDate, description "
        		   + "FROM PLANINFO "
        		   + "ORDER BY planId";
		jdbcUtil.setSqlAndParameters(sql, null);		// JDBCUtil에 query문 설정
					
		try {
			ResultSet rs = jdbcUtil.executeQuery();			// query 실행			
			List<Plan> planList = new ArrayList<Plan>();	// Plan들의 리스트 생성
			while (rs.next()) {
				Plan plan = new Plan(			// Plan 객체를 생성하여 현재 행의 정보를 저장
					rs.getString("planId"),
					rs.getString("userId"),
					rs.getString("planName"),
					rs.getDate("startDate"),
					rs.getDate("endDate"),
					rs.getString("description"));
				planList.add(plan);				// List에 Plan 객체 저장
			}		
			return planList;					
			
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			jdbcUtil.close();		// resource 반환
		}
		return null;
	}
	
	/**
	 * 특정 사용자의 모든 여행 계획을 검색하여 List에 저장 및 반환.
	 */
	public List<Plan> findPlansByUser(String userId) throws SQLException {
        String sql = "SELECT planId, planName, startDate, endDate, description "
     				+ "FROM PLANINFO "
     				+ "WHERE userId = ?";                         
		jdbcUtil.setSqlAndParameters(sql, new Object[] {userId});	// JDBCUtil에 query문과 매개 변수 설정
		
		try {
			ResultSet rs = jdbcUtil.executeQuery();		// query 실행
			List<Plan> planList = new ArrayList<Plan>();	// Plan들의 리스트 생성
			while (rs.next()) {
				Plan plan = new Plan(			// Plan 객체를 생성하여 현재 행의 정보를 저장
					rs.getString("planId"),
					rs.getString("userId"),
					rs.getString("planName"),
					rs.getDate("startDate"),
					rs.getDate("endDate"),
					rs.getString("description"));
				planList.add(plan);			// List에 Plan 객체 저장
			}		
			return planList;					
				
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			jdbcUtil.close();		// resource 반환
		}
		return null;
	}
	
	/**
	 * 특정 사용자 ID에 해당하는 계획이 존재하는지 검사.
	 */
	public boolean existingPlan(String planId) throws SQLException {
		String sql = "SELECT count(*) FROM PLANINFO WHERE planId=?";      
		jdbcUtil.setSqlAndParameters(sql, new Object[] {planId});	// JDBCUtil에 query문과 매개 변수 설정

		try {
			ResultSet rs = jdbcUtil.executeQuery();		// query 실행
			if (rs.next()) {
				int count = rs.getInt(1);
				return (count == 1 ? true : false);
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			jdbcUtil.close();		// resource 반환
		}
		return false;
	}

}