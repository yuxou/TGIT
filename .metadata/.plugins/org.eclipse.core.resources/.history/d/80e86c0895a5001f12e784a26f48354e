package model.dao;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import model.domain.Plan;
import model.domain.Flight;
import model.domain.Accommodation;
import model.domain.User;
import repository.jdbc.*;

public class PlanDAO {

    private JDBCUtil jdbcUtil = null;

    public PlanDAO() {
        jdbcUtil = new JDBCUtil();  // JDBCUtil 객체 생성
    }

    // 일정 추가
    public void createPlan(Plan plan) {
        String sql = "INSERT INTO plans (planId, planTitle, country, startDate, endDate, isPublic, writerId) VALUES (?, ?, ?, ?, ?, ?, ?)";
        try (Connection conn = jdbcUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, plan.getPlanId());  // planId는 클라이언트에서 직접 제공해야 함
            pstmt.setString(2, plan.getPlanTitle());
            pstmt.setString(3, plan.getCountry());
            pstmt.setDate(4, new java.sql.Date(plan.getStartDate().getTime()));
            pstmt.setDate(5, new java.sql.Date(plan.getEndDate().getTime()));
            pstmt.setBoolean(6, plan.isPublic());
            pstmt.setString(7, plan.getWriter().getUserId());

            pstmt.executeUpdate();

            // 비행 일정 및 숙소 정보 추가
            addFlightsToPlan(plan.getPlanId(), plan.getFlightInfo());
            addAccommodationsToPlan(plan.getPlanId(), plan.getAccommodationInfo());

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // 일정 검색 기능
    public List<Plan> searchPlans(String keyword) {
        return getAllPlans().stream()
                .filter(plan -> plan.getPlanTitle().toLowerCase().contains(keyword.toLowerCase()))
                .collect(Collectors.toList());
    }

    // 모든 일정 조회 (키워드 없이 전체 조회)
    public List<Plan> getAllPlans() {
        return getAllPlans(""); // 빈 문자열을 키워드로 전달하여 전체 목록을 조회
    }

    // 키워드 기반 모든 일정 조회
    public List<Plan> getAllPlans(String keyword) {
        List<Plan> plans = new ArrayList<>();
        String sql = "SELECT * FROM plans";
        
        try (Connection conn = jdbcUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {
            while (rs.next()) {
                Plan plan = new Plan(
                    rs.getInt("planId"),
                    rs.getString("planTitle"),
                    rs.getString("country"),
                    rs.getDate("startDate"),
                    rs.getDate("endDate"),
                    new ArrayList<>(),       // 기본값으로 빈 리스트 사용
                    new ArrayList<>(),       // 기본값으로 빈 리스트 사용
                    rs.getBoolean("isPublic"),
                    new User()               // 기본 User 객체 생성
                );
                plans.add(plan);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        // 키워드가 비어있지 않다면 필터링
        if (!keyword.isEmpty()) {
            plans.removeIf(plan -> 
                !plan.getPlanTitle().toLowerCase().contains(keyword.toLowerCase())
            );
        }

        return plans;
    }

    // 일정 수정
    public void editPlan(Plan updatedPlan) {
        String sql = "UPDATE plans SET planTitle = ?, startDate = ?, endDate = ?, country = ? WHERE planId = ?";
        try (Connection conn = jdbcUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, updatedPlan.getPlanTitle());
            pstmt.setDate(2, new java.sql.Date(updatedPlan.getStartDate().getTime()));
            pstmt.setDate(3, new java.sql.Date(updatedPlan.getEndDate().getTime()));
            pstmt.setString(4, updatedPlan.getCountry());
            pstmt.setInt(5, updatedPlan.getPlanId());
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // 일정 삭제
    public void deletePlan(int planId) {
        String sql = "DELETE FROM plans WHERE planId = ?";
        try (Connection conn = jdbcUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, planId);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // 일정 상세 조회
    public Optional<Plan> findPlanById(int planId) {
        String sql = "SELECT * FROM plans WHERE planId = ?";
        Plan plan = null;
        try (Connection conn = jdbcUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, planId);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                plan = new Plan(
                    rs.getInt("planId"),
                    rs.getString("planTitle"),
                    rs.getString("country"),
                    rs.getDate("startDate"),
                    rs.getDate("endDate"),
                    new ArrayList<>(),
                    new ArrayList<>(),
                    rs.getBoolean("isPublic"),
                    new User()
                );
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return Optional.ofNullable(plan);
    }

    // 비행 일정 추가
    private void addFlightsToPlan(int planId, List<Flight> flightInfo) {
        String sql = "INSERT INTO flights (planId, flightId, departure, destination, departureDate, departureTime, arrivalDate, arrivalTime, cost) "
        			+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
        
        try (Connection conn = jdbcUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            for (Flight flight : flightInfo) {
                pstmt.setInt(1, planId);
                pstmt.setInt(2, flight.getFlightId());
                pstmt.setString(3, flight.getDeparture());
                pstmt.setString(4, flight.getDestination());
                pstmt.setDate(5, new java.sql.Date(flight.getDepartureDate().getTime()));
                pstmt.setString(6, flight.getDepartureTime());
                pstmt.setDate(7, new java.sql.Date(flight.getArrivalDate().getTime()));
                pstmt.setString(8, flight.getArrivalTime());
                pstmt.setDouble(9, flight.getCost());
                pstmt.executeUpdate();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // 숙소 추가
    private void addAccommodationsToPlan(int planId, List<Accommodation> accommodationInfo) {
        String sql = "INSERT INTO accommodations (planId, accommodationId, name, checkInDate, checkOutDate, cost) VALUES (?, ?, ?, ?, ?, ?)";
        try (Connection conn = jdbcUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            for (Accommodation accommodation : accommodationInfo) {
                pstmt.setInt(1, planId);
                pstmt.setInt(2, accommodation.getAccommodationId());
                pstmt.setString(3, accommodation.getName());
                pstmt.setDate(4, new java.sql.Date(accommodation.getCheckInDate().getTime()));
                pstmt.setDate(5, new java.sql.Date(accommodation.getCheckOutDate().getTime()));
                pstmt.setDouble(6, accommodation.getCost());
                pstmt.executeUpdate();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // 동행자 추가
    public void addCompanionToPlan(int planId, User companion) {
        String sql = "INSERT INTO companions (planId, userId, name) VALUES (?, ?, ?)";
        try (Connection conn = jdbcUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, planId);
            pstmt.setString(2, companion.getUserId());
            pstmt.setString(3, companion.getName());
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // 동행자 삭제
    public void deleteCompanion(int planId, int companionId) {
        String sql = "DELETE FROM companions WHERE planId = ? AND userId = ?";
        try (Connection conn = jdbcUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, planId);
            pstmt.setInt(2, companionId);
            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected == 0) {
                System.out.println("삭제할 동행자가 존재하지 않습니다.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
