package model.dao;

import java.sql.*;
import java.util.*;
import model.domain.Expense;
import repository.jdbc.*;

public class ExpenseDAO {

    // 지출 추가
    public void addExpense(Expense expense) {
        String sql = "INSERT INTO expenses (place, expenseDate, category, cost, notes) VALUES (?, ?, ?, ?, ?)";
        try (Connection conn = JDBCUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, expense.getPlace());
            pstmt.setDate(2, expense.getSqlExpenseDate()); // getSqlExpenseDate로 sql.Date 변환된 값 사용
            pstmt.setString(3, expense.getCategory());
            pstmt.setDouble(4, expense.getCost());
            pstmt.setString(5, expense.getNotes());
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // 지출 수정
    public void editExpense(int expenseId, String place, int year, int month, int day, String category, double cost, String notes) {
        String sql = "UPDATE expenses SET place = ?, expenseDate = ?, category = ?, cost = ?, notes = ? WHERE expenseId = ?";
        try (Connection conn = JDBCUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, place);
            pstmt.setDate(2, new java.sql.Date(new Expense().createDate(year, month, day).getTime())); // 새로 생성된 Expense로 Date 변환
            pstmt.setString(3, category);
            pstmt.setDouble(4, cost);
            pstmt.setString(5, notes);
            pstmt.setInt(6, expenseId);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // 지출 삭제
    public void deleteExpense(int expenseId) {
        String sql = "DELETE FROM expenses WHERE expenseId = ?";
        try (Connection conn = JDBCUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, expenseId);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // 전체 지출 조회
    public double getTotalExpense(int planId) {
        String sql = "SELECT SUM(cost) AS totalCost FROM expenses WHERE planId = ?";
        double total = 0;
        try (Connection conn = JDBCUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, planId);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                total = rs.getDouble("totalCost");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return total;
    }

    // 경비 분할
    public Map<String, Double> splitExpense(int expenseId, int numPeople) {
        String sql = "SELECT cost FROM expenses WHERE expenseId = ?";
        Map<String, Double> splitMap = new HashMap<>();
        try (Connection conn = JDBCUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, expenseId);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                double cost = rs.getDouble("cost");
                double splitAmount = cost / numPeople;
                for (int i = 1; i <= numPeople; i++) {
                    splitMap.put("인당 " + i, splitAmount);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return splitMap;
    }
}