package model.dao;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Properties;

import javax.sql.DataSource;

import org.apache.commons.dbcp2.BasicDataSource;

public class ConnectionManager {
    
    private static final String DB_DRIVER = "oracle.jdbc.driver.OracleDriver";
    private static final String DB_URL = "jdbc:oracle:thin:@localhost:1521:xe";  // 예시: Oracle DB URL
    private static final String DB_USERNAME = "dbp240106";
    private static final String DB_PASSWORD = "113842";
  
    private static DataSource ds = null;
    
    // 클래스 로딩 시 DataSource 초기화
    static {
        initializeDataSource();
    }

    // 데이터베이스 연결 풀 초기화
    private static void initializeDataSource() {
        InputStream input = null;
        Properties prop = new Properties();

        try {
            // context.properties 파일을 로딩하여 DB 설정을 읽어옵니다.
            input = new FileInputStream("context.properties"); // 경로를 절대 경로로 변경하거나 클래스패스에 맞게 수정
            prop.load(input);
            
            // DataSource 설정
            BasicDataSource bds = new BasicDataSource();
            bds.setDriverClassName(prop.getProperty("db.driver", DB_DRIVER));
            bds.setUrl(prop.getProperty("db.url", DB_URL));
            bds.setUsername(prop.getProperty("db.username", DB_USERNAME));
            bds.setPassword(prop.getProperty("db.password", DB_PASSWORD));
            ds = bds;
            
        } catch (IOException ex) {
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            if (input != null) {
                try {
                    input.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    // 데이터베이스 연결을 가져오는 메소드
    public Connection getConnection() {
        Connection conn = null;
        try {
            conn = ds.getConnection();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return conn;
    }

    // 데이터소스를 닫는 메소드 (데이터베이스 연결 풀을 종료하는 것이 아님)
    public void close() {
        // DataSource 자체를 닫는 것이 아니라, 필요할 때 연결을 반환하는 방식으로 처리
    }

    // 현재 활성화 상태인 Connection 개수 및 비활성화 상태인 Connection 개수를 출력
    public void printDataSourceStats() {
        try {
            BasicDataSource bds = (BasicDataSource) ds;
            System.out.println("NumActive: " + bds.getNumActive());
            System.out.println("NumIdle: " + bds.getNumIdle());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}